environment:
  - box:
      label: "ground"
      dim: [1.5, 1.5, 0.1]
      pos: [0, 0, -0.05]
  - box:
      label: "dynamic_obstacle"
      dim: [0.1, 0.5, 1]
      pos: [0.5, 0.5, 0.5]
  - box:
      label: "dynamic_obstacle"
      dim: [0.1, 0.5, 1]
      pos: [0.5, -0.5, 0.5]
  - box:
      label: "dynamic_obstacle"
      dim: [0.1, 0.5, 1]
      pos: [0.7, 0.5, 0.5]
  - box:
      label: "dynamic_obstacle"
      dim: [0.1, 0.5, 1]
      pos: [0.7, -0.5, 0.5]
  - box:
      label: "dynamic_obstacle"
      dim: [0.1, 0.5, 1]
      pos: [0.9, 0.5, 0.5]
  - box:
      label: "dynamic_obstacle"
      dim: [0.1, 0.5, 1]
      pos: [0.9, -0.5, 0.5]
  - box:
      label: "dynamic_obstacle"
      dim: [0.1, 0.5, 1]
      pos: [1.1, 0.5, 0.5]
  - box:
      label: "dynamic_obstacle"
      dim: [0.1, 0.5, 1]
      pos: [1.1, -0.5, 0.5]
  - box:
      label: "dynamic_obstacle"
      dim: [0.1, 0.5, 1]
      pos: [1.3, 0.5, 0.5]
  - box:
      label: "dynamic_obstacle"
      dim: [0.1, 0.5, 1]
      pos: [1.3, -0.5, 0.5]

robot:
  type: "xarm6"
  urdf: "/data/xarm6/xarm6.urdf"
  space: "RealVectorSpace"
  num_DOFs: 6
  q_start: [1.5708, 1.5708, -2.3562, 0, 0, 0]
  q_goal:  [-1.5708, 0, -2.3562, 0, 0, 0]
  min_dist_start_goal: 0                                      # If greater than zero, 'q_start' and 'q_goal' will be generated randomly, where the workspace distance between them is minimally 'min_dist_start_goal'
  capsules_radius: [0.047, 0.12, 0.11, 0.09, 0.05, 0.0380]    # When gripper is not attached
#   capsules_radius: [0.047, 0.12, 0.11, 0.09, 0.05, 0.05]    # When gripper is attached
  gripper_length: 0      									  # In [m]
  ground_included: 0      								      # Please check whether 'ground' is added in 'environment'
  self_collision_checking: true                               # Whether self-collision should be checked
  WS_center: [0.0, 0.0, 0.267]                                # Workspace center point in [m]
  WS_radius: 1.5                                              # Workspace radius in [m] assuming spherical workspace shape
  max_vel:  [3.1415, 3.1415, 3.1415, 3.1415, 3.1415, 3.1415]  # Maximal velocity of each robot's joint in [rad/s]
  max_acc:  [20, 20, 20, 20, 20, 20]                          # Maximal acceleration of each robot's joint in [rad/s²]
  max_jerk: [500, 500, 500, 500, 500, 500]                    # Maximal jerk of each robot's joint in [rad/s³]

testing:
  init_num: 1                     # Number of testing to start with
  init_num_success: 0             # Initial number of already achieved successful tests
  max_num: 1000                   # Maximal number of tests that should be carried out
  reach_successful_tests: false	  # If true, run totally 'max_num' successful tests 
